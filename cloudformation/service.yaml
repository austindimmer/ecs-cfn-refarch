AWSTemplateFormatVersion: "2010-09-09"

Description:
  ECS refarch - https://github.com/pahud/ecs-cfn-refarch

Mappings:
  InstanceType:
    default:
      web: m4.large

Parameters:
  RootStackName:
    Type: String
    Default: ""
    
  SshKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
    
  VpcId:
    Description: The VPC of the worker instances
    Type: AWS::EC2::VPC::Id

  SubnetIds:
    Description: Select 3 subnets where workers can be created.
    Type: List<AWS::EC2::Subnet::Id>
    
  ExtraSG:
    Type: String
    Description: Additional Security Group for EC2 
    Default: ""

  NodeInstanceType:
    Description: Default EC2 instance type for the node instances.
    Type: String
    Default: t3.large
    AllowedValues:
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - t3.nano
    - t3.micro
    - t3.small
    - t3.medium
    - t3.large
    - t3.xlarge
    - t3.2xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - m5.4xlarge
    - m5.12xlarge
    - m5.24xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - c5.9xlarge
    - c5.18xlarge
    - i3.large
    - i3.xlarge
    - i3.2xlarge
    - i3.4xlarge
    - i3.8xlarge
    - i3.16xlarge
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    - r4.8xlarge
    - r4.16xlarge
    - x1.16xlarge
    - x1.32xlarge
    - p2.xlarge
    - p2.8xlarge
    - p2.16xlarge
    - p3.2xlarge
    - p3.8xlarge
    - p3.16xlarge
    - p3dn.24xlarge
    - r5.large
    - r5.xlarge
    - r5.2xlarge
    - r5.4xlarge
    - r5.12xlarge
    - r5.24xlarge
    - r5d.large
    - r5d.xlarge
    - r5d.2xlarge
    - r5d.4xlarge
    - r5d.12xlarge
    - r5d.24xlarge
    - z1d.large
    - z1d.xlarge
    - z1d.2xlarge
    - z1d.3xlarge
    - z1d.6xlarge
    - z1d.12xlarge
    ConstraintDescription: Must be a valid EC2 instance type
    
  # InstancePurchaseOption: 
  #   Type: String
  #   AllowedValues: ["spot", "on-demand"]
  #   Default: spot
  #   Description: spot or on-demand EC2 instance(s)
  # SpotPrice:
  #   Type: Number
  #   Description: spot price for spot instances
  #   Default: 0.02
  CaddyImage:
    Description: Caddy docker image URI
    Type: String
    Default: pahud/caddy:ecs-cfn-refarch
  #
  # For the 1st ASG
  #
  ASGDesiredCapacity:
    Type: Number
    Description: instance count under AutoScalingGroup
    Default: 2
  ASGMaxSize:
    Type: Number
    Description: max instance count under AutoScalingGroup
    Default: 8
  ASGMinSize:
    Type: Number
    Description: min instance count under AutoScalingGroup
    Default: 0
  OnDemandBaseCapacity:
    Type: Number
    Description: On-Demand Base Capacity
    Default: 0
  OnDemandPercentageAboveBaseCapacity:
    Type: Number
    Description: "on-demand percentage above base capacity(0-100)"
    Default: 0
  SpotInstancePools:
    Type: Number
    Description: "spot instance pools(1-20)"
    Default: 9
  InstanceTypesOverride:
    Type: String
    Description: "multiple instance types to override(seperated by comma)"
    Default: "t3.small,t3.medium,t3.large"    
  ASGAutoAssignPublicIp:
    Type: String
    Description: "auto assign public IP address for ASG instances"
    AllowedValues:
      - "yes"
      - "no"
    Default: "yes"
  #
  # For the 2nd ASG
  #
  ASGDesiredCapacity2:
    Type: Number
    Description: instance count under AutoScalingGroup
    Default: 2
  ASGMaxSize2:
    Type: Number
    Description: max instance count under AutoScalingGroup
    Default: 8
  ASGMinSize2:
    Type: Number
    Description: min instance count under AutoScalingGroup
    Default: 0
  OnDemandBaseCapacity2:
    Type: Number
    Description: On-Demand Base Capacity
    Default: 2
  OnDemandPercentageAboveBaseCapacity2:
    Type: Number
    Description: "on-demand percentage above base capacity(0-100)"
    Default: 100
  SpotInstancePools2:
    Type: Number
    Description: "spot instance pools(1-20)"
    Default: 9    
  InstanceTypesOverride2:
    Type: String
    Description: "multiple instance types to override for 2nd ASG(seperated by comma)"
    Default: "m4.large,m5.large,c5.large" 
  ASGAutoAssignPublicIp2:
    Type: String
    Description: "auto assign public IP address for ASG instances"
    AllowedValues:
      - "yes"
      - "no"
    Default: "yes"
    
  UseALB:
    Type: String
    AllowedValues: ["yes", "no"]
    Description: select yes if you'd like to use ALB
    Default: "yes"
  AppName:
    Type: String
    Description: select your ECS App Name
    Default: Caddy
  SNSMobileNumber:
    Type: String
    Description: "Your mobile number to receive SMS notification, starting with '+''"
    Default: ""
  Tag:
    Type: String
    Description: placeholder for Docker image tag generated by CodeBuild
    Default: ""
  Repository:
    Type: String
    Description: placeholder for ECR repository
    Default: ""
  MaxPercent:
    Type: Number
    Default: 200
  MinPercent:
    Type: Number
    Default: 100
  ServiceDesiredCount:
    Type: Number
    Default: 2
  UseBuiltInTaskDefinition:
    Type: String
    Default: "yes"
    Description: "select yes if you run this template standalone"
    AllowedValues:
      - "yes"
      - "no"
  S3BucketName:
    Type: String
    Description: >
      OPTIONAL - Specifies the name of your AWS account S3 bucket in which the index.zip file is stored. index.zip contains the Python Lambda code index.py; Please download this from https://github.com/pahud/ecs-cfn-refarch/blob/master/lambdaFunctions/ecs_container_draining and upload to your S3 bucket.
    Default: ""
  ParameterStoreYourName:
    Type: String
    Default: "DefaultName"
    Description: >
      OPTIONAL - parameter string stored in EC2 Parameter Store
  ParameterStoreYourPassword:
    Type: String
    Default: "DefaultPassword"
    Description: >
      OPTIONAL - parameter string stored in EC2 Parameter Store
  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
   


Conditions:
  IsASGAutoAssignPublicIp: !Equals [ !Ref ASGAutoAssignPublicIp , "yes" ]
  HasSMSCond: !Not [ !Equals [ !Ref SNSMobileNumber, ""]]
  UseALBCond: !Equals [ !Ref UseALB, "yes" ] 
  UseELBCond: !Equals [ !Ref UseALB, "no" ] 
  UseBuiltInTaskDefinitionCond: !Equals [ !Ref UseBuiltInTaskDefinition, "yes" ]
  ECSLambdaDrainCond: !Not [ !Equals [ !Ref S3BucketName, "" ] ]
  HasExtraSG: !Not [ !Equals [!Ref ExtraSG, ""]]

Resources:
  ParameterYourName:
    Type: "AWS::SSM::Parameter"
    Properties: 
      Name: !Sub "ECSYourName-${AWS::StackName}"
      Description: "Your Name saved in EC2 Parameter Store"
      Type: String
      Value: !Ref ParameterStoreYourName

  ParameterYourPassword:
    Type: "AWS::SSM::Parameter"
    Properties: 
      Name: !Sub "ECSYourPassword-${AWS::StackName}"
      Description: "Your Password saved in EC2 Parameter Store"
      Type: String
      Value: !Ref ParameterStoreYourPassword


#######################
# CloudWatch Log Group
#######################
  myLogGroup: 
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: !Sub /aws/ECS/${AppName}-${AWS::StackName}
      RetentionInDays: 7
  myAwsLogsLogGroup: 
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: !Sub /aws/ECS/${AppName}-awslogs-${AWS::StackName}
      RetentionInDays: 7
  ecsAgentLogGroup: 
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: !Sub /aws/ECS/${AppName}-ecs-agent-${AWS::StackName}
      RetentionInDays: 7

  PHP7LogGroup: 
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: !Sub /aws/ECS/var/log/php7-${AWS::StackName}
      RetentionInDays: 7

  cwlFilterPHPError:
    DependsOn: PHP7LogGroup
    Type: "AWS::Logs::MetricFilter"
    Properties: 
      FilterPattern: "Fatal"
      LogGroupName: !Sub /aws/ECS/var/log/php7-${AWS::StackName}
      MetricTransformations:
        -
          MetricName: "PHPFatalErrorCount"
          MetricNamespace: "ECSDemo"
          MetricValue: 1

  cwAlarmPHPError:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      # ActionsEnabled: "true"
      AlarmActions:
        - !Ref PHPErrorSNSTopic
      AlarmDescription: "too many PHP Fatal error"
      AlarmName: "PHPFatalErrorHigh"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      # Dimensions:
      #   - 
      #     Name:
      #     Value: 0
      # EvaluateLowSampleCountPercentile: String
      EvaluationPeriods: 1
      # ExtendedStatistic: String
      # InsufficientDataActions:
      #   - String
      MetricName: "PHPFatalErrorCount"
      Namespace: ECSDemo
      # OKActions:
      #   - String
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
      Unit: Count

#######################
#   KMS
#######################

  myKey: 
    Type: "AWS::KMS::Key"
    Properties: 
      Description: "key or EC2 Parameter Store"
      KeyPolicy: 
        Version: "2012-10-17"
        Id: "key-default-1"
        Statement: 
          - 
            Sid: "Allow administration of the key"
            Effect: "Allow"
            Principal: 
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: 
              - "kms:Create*"
              - "kms:Describe*"
              - "kms:Enable*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:Update*"
              - "kms:Revoke*"
              - "kms:Disable*"
              - "kms:Get*"
              - "kms:Delete*"
              - "kms:ScheduleKeyDeletion"
              - "kms:CancelKeyDeletion"
            Resource: "*"
          - 
            Sid: "Allow use of the key"
            Effect: "Allow"
            Principal: 
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: 
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: "*"

  myEcsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/myEcsKeyAlias-${AWS::StackName}"
      TargetKeyId:
        Ref: myKey

#######################
#   IAM
#######################

  ECSServiceRoleForEC2:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: 
                  - 'sts:AssumeRole'
                Effect: Allow
                Principal:
                  Service:
                    - ec2.amazonaws.com
        Path: /
        ManagedPolicyArns:
            - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role'   
            - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
        Policies:
        - PolicyName: ecs-instance-create-tag
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - ec2:CreateTags
              Resource: "*"
        - PolicyName: ecs-instance-awslogs
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
                - "logs:DescribeLogStreams"
              Resource: "arn:aws:logs:*:*:*"
        - PolicyName: ecs-describe-ec2-instances
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - "ec2:DescribeInstance*"
              Resource: "*"  

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: 
                  - 'sts:AssumeRole'
                Effect: Allow
                Principal:
                  Service:
                    - ecs.amazonaws.com
        Path: /
        ManagedPolicyArns:
            - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'   


  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: 
                  - 'sts:AssumeRole'
                Effect: Allow
                Principal:
                  Service:
                    - ecs-tasks.amazonaws.com
        Path: /
        Policies:
        - PolicyName: ecs-task-get-parameters
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - ssm:GetParameters
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ECS*"
        - PolicyName: ecs-task-decrypt-kms
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - kms:Decrypt
              Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${myKey}"
        - PolicyName: ecs-task-put-cwl
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "arn:aws:logs:*:*:*"


  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: 
                  - 'sts:AssumeRole'
                Effect: Allow
                Principal:
                  Service:
                    - ecs-tasks.amazonaws.com
        Path: /
        Policies:
        - PolicyName: ecs-task-get-parameters
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - ssm:GetParameters
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ECS*"
        - PolicyName: ecs-task-decrypt-kms
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - kms:Decrypt
              Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${myKey}"
        - PolicyName: ecs-task-put-cwl
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "arn:aws:logs:*:*:*"


  ECSAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: 
                  - 'sts:AssumeRole'
                Effect: Allow
                Principal:
                  Service:
                    - application-autoscaling.amazonaws.com
        Path: /
        Policies:
        - PolicyName: ecs-service-autoscaling
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - application-autoscaling:*
              - cloudwatch:DescribeAlarms
              - cloudwatch:PutMetricAlarm
              - ecs:DescribeServices
              - ecs:UpdateService
              Resource: "*"
  

#######################
#  ASG / EC2 / ELB / ALB
#######################

  SgLB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-sglb"
      GroupDescription: "sg for LoadBalancer"
      VpcId: !Ref VpcId
      
  SgEC2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-sgEc2"
      GroupDescription: "sg for ec2"
      VpcId: !Ref VpcId

  ingressSgLB1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SgLB
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  ingressSgLB2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SgLB
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0

  ingress3:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SgEC2
      SourceSecurityGroupId: !Ref SgLB
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      #CidrIp: 10.0.0.0/16


#######################
#   ALB
#######################   

  publicALB:
    Condition: UseALBCond
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Sub
        - ${StackName}-alb
        -
          StackName: !Ref AWS::StackName
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SgLB
      Subnets:
        - !Select [0, !Ref SubnetIds]
        - !Select [1, !Ref SubnetIds]
        - !Select [2, !Ref SubnetIds]
      Tags:
        -
          Key: Name
          Value: !Sub
            - ${StackName}-alb
            - StackName: !Ref AWS::StackName

  ALBListener:
    Condition: UseALBCond
    Type : AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        -
          Type: forward
          TargetGroupArn: !Ref publicALBTargetGroup
      LoadBalancerArn: !Ref publicALB
      Port: 80
      Protocol: HTTP

  publicALBTargetGroup:
    Condition: UseALBCond
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299
      Name: !Sub "${AWS::StackName}"
      Port: 80
      Protocol: HTTP
      Tags:
        - 
          Key: Name
          Value: alb-tg        
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
      TargetGroupAttributes: 
        - 
          Key: deregistration_delay.timeout_seconds
          Value: 15

 
  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: /
      Roles:
        - !Ref ECSServiceRoleForEC2


  # TG:
  #   Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
  #   Properties:
  #     HealthCheckIntervalSeconds: 15
  #     HealthCheckPath: /
  #     # HealthCheckPort: String
  #     HealthCheckProtocol: HTTP
  #     HealthCheckTimeoutSeconds: 5
  #     HealthyThresholdCount: 2
  #     # Matcher: Matcher
  #     Name: !Sub "${ECSDefaultCluster}"
  #     Port: !Ref TargetGroupPort
  #     Protocol: HTTP
  #     TargetType: instance
  #     UnhealthyThresholdCount: 2
  #     VpcId: !Ref VpcId

  ASG1:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref ASGDesiredCapacity
      #LaunchConfigurationName: !Ref NodeLaunchConfig
      # LaunchTemplate: 
      #   LaunchTemplateId: !Ref MyLaunchTemplate
      #   Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandAllocationStrategy: prioritized
          OnDemandBaseCapacity: !Ref OnDemandBaseCapacity
          OnDemandPercentageAboveBaseCapacity: !Ref OnDemandPercentageAboveBaseCapacity
          SpotAllocationStrategy: lowest-price
          SpotInstancePools: !Ref SpotInstancePools
          # SpotMaxPrice: String
        LaunchTemplate:
          LaunchTemplateSpecification: 
            LaunchTemplateId: !Ref MyLaunchTemplate
            # LaunchTemplateName: String
            Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
          Overrides: 
            - InstanceType: !Select [0, !Split [ ",", !Ref InstanceTypesOverride ] ]
            - InstanceType: !Select [1, !Split [ ",", !Ref InstanceTypesOverride ] ]
            - InstanceType: !Select [2, !Split [ ",", !Ref InstanceTypesOverride ] ]
      MinSize: !Ref ASGMinSize
      MaxSize: !Ref ASGMaxSize
      # TargetGroupARNs: 
      #   - !Ref TG
      VPCZoneIdentifier:
        !Ref SubnetIds
      MetricsCollection:
      - 
        Granularity: "1Minute"
        Metrics: 
          - GroupMinSize
          - GroupMaxSize
          - GroupDesiredCapacity
          - GroupInServiceInstances
          - GroupPendingInstances
          - GroupStandbyInstances
          - GroupTerminatingInstances
          - GroupTotalInstances
      Tags:
      - Key: Name
        Value: !Sub "${ECSDefaultCluster}-ASG-Node"
        PropagateAtLaunch: 'true'
      - Key: ECS
        Value: 1
        PropagateAtLaunch: 'true'
      - Key: Patch Group
        Value: AmazonLinux2ECSNodes
        PropagateAtLaunch: 'true'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !Ref ASGMinSize
        MaxBatchSize: '1'
        PauseTime: 'PT1M'
        

  ASG2:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref ASGDesiredCapacity2
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandAllocationStrategy: prioritized
          OnDemandBaseCapacity: !Ref OnDemandBaseCapacity2
          OnDemandPercentageAboveBaseCapacity: !Ref OnDemandPercentageAboveBaseCapacity2
          SpotAllocationStrategy: lowest-price
          SpotInstancePools: !Ref SpotInstancePools2
          # SpotMaxPrice: String
        LaunchTemplate:
          LaunchTemplateSpecification: 
            LaunchTemplateId: !Ref MyLaunchTemplate
            # LaunchTemplateName: String
            Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
          Overrides: 
            - InstanceType: !Select [0, !Split [ ",", !Ref InstanceTypesOverride2 ] ]
            - InstanceType: !Select [1, !Split [ ",", !Ref InstanceTypesOverride2 ] ]
            - InstanceType: !Select [2, !Split [ ",", !Ref InstanceTypesOverride2 ] ]
      MinSize: !Ref ASGMinSize2
      MaxSize: !Ref ASGMaxSize2
      # TargetGroupARNs: 
      #   - !Ref TG
      VPCZoneIdentifier:
        !Ref SubnetIds
      Tags:
      - Key: Name
        Value: !Sub "${ECSDefaultCluster}-ASG2-Node"
        PropagateAtLaunch: 'true'
      - Key: ECS
        Value: 1
        PropagateAtLaunch: 'true'
      - Key: Patch Group
        Value: AmazonLinux2ECSNodes
        PropagateAtLaunch: 'true'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !Ref ASGMinSize2
        MaxBatchSize: '1'
        PauseTime: 'PT1M'

  LCH:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref ASG1
      HeartbeatTimeout: 60
      DefaultResult: CONTINUE
      LifecycleHookName: !Sub "${ASG1}-LCH"
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
 

  LCH2:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref ASG2
      HeartbeatTimeout: 60
      DefaultResult: CONTINUE
      LifecycleHookName: !Sub "${ASG2}-LCH"
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING  
#
# Launch Template
#
  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "ecsLaunchTemplate-${AWS::StackName}"
      LaunchTemplateData: 
        # SecurityGroupIds: 
        #   - !Ref SgEC2
        TagSpecifications: 
          -
            ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "${ECSDefaultCluster}-ASG-Node"

        UserData: 
          "Fn::Base64": 
            !Sub |
              Content-Type: multipart/mixed; boundary="==BOUNDARY=="
              MIME-Version: 1.0
  
              --==BOUNDARY==
              Content-Type: text/x-shellscript; charset="us-ascii"
              #!/bin/bash
              yum install -y awscli amazon-ssm-agent ec2-instance-connect
              # starting the ssm-agent
              systemctl start amazon-ssm-agent
              
              echo ECS_CLUSTER=${AWS::StackName}-ecs-cluster >> /etc/ecs/ecs.config
              echo ECS_DISABLE_IMAGE_CLEANUP=false >> /etc/ecs/ecs.config
    
              iid=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
              export AWS_DEFAULT_REGION=${AWS::Region}
              ilc=$(aws ec2 describe-instances --instance-ids  $iid  --query 'Reservations[0].Instances[0].InstanceLifecycle' --output text)
              if [ "$ilc" == "spot" ]; then
                echo ECS_INSTANCE_ATTRIBUTES='{"instance-purchase-option":"spot"}' >> /etc/ecs/ecs.config
              else
                echo ECS_INSTANCE_ATTRIBUTES='{"instance-purchase-option":"ondemand"}' >> /etc/ecs/ecs.config
              fi
              
              yum update -y
              # Install awslogs and the jq JSON parser
              yum install -y awslogs jq aws-cfn-bootstrap
  
              # Inject the CloudWatch Logs configuration file contents
              cat > /etc/awslogs/awslogs.conf <<- EOF
              [general]
              state_file = /var/lib/awslogs/agent-state        
              
              [/var/log/dmesg]
              file = /var/log/dmesg
              log_group_name = /aws/ECS/var/log/dmesg
              log_stream_name = {cluster}/{container_instance_id}
  
              [/var/log/messages]
              file = /var/log/messages
              log_group_name = /aws/ECS/var/log/messages
              log_stream_name = {cluster}/{container_instance_id}
              datetime_format = %b %d %H:%M:%S
  
              [/var/log/docker]
              file = /var/log/docker
              log_group_name = /aws/ECS/var/log/docker
              log_stream_name = {cluster}/{container_instance_id}
              datetime_format = %Y-%m-%dT%H:%M:%S.%f
  
              [/var/log/ecs/ecs-init.log]
              file = /var/log/ecs/ecs-init.log.*
              log_group_name = /aws/ECS/var/log/ecs/ecs-init.log
              log_stream_name = {cluster}/{container_instance_id}
              datetime_format = %Y-%m-%dT%H:%M:%SZ
  
              [/var/log/ecs/ecs-agent.log]
              file = /var/log/ecs/ecs-agent.log.*
              log_group_name = /aws/ECS/var/log/ecs/ecs-agent.log
              log_stream_name = {cluster}/{container_instance_id}
              datetime_format = %Y-%m-%dT%H:%M:%SZ
  
              [/var/log/ecs/audit.log]
              file = /var/log/ecs/audit.log.*
              log_group_name = /aws/ECS/var/log/ecs/audit.log
              log_stream_name = {cluster}/{container_instance_id}
              datetime_format = %Y-%m-%dT%H:%M:%SZ
  
              EOF
  
              --==BOUNDARY==
              Content-Type: text/x-shellscript; charset="us-ascii"
              #!/bin/bash
              # Set the region to send CloudWatch Logs data to (the region where the container instance is located)
              region=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)
              sed -i -e "s/region = us-east-1/region = $region/g" /etc/awslogs/awscli.conf
  
              start ecs
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ASG1 --region ${AWS::Region} 
  
              --==BOUNDARY==
              Content-Type: text/upstart-job; charset="us-ascii"
  
              #upstart-job
              description "Configure and start CloudWatch Logs agent on Amazon ECS container instance"
              author "Amazon Web Services"
              start on started ecs
  
              script
                exec 2>>/var/log/ecs/cloudwatch-logs-start.log
                set -x
                
                until curl -s http://localhost:51678/v1/metadata
                do
                  sleep 1	
                done
  
                # Grab the cluster and container instance ARN from instance metadata
                cluster=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .Cluster')
                container_instance_id=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .ContainerInstanceArn' | awk -F/ '{print $2}' )
                
                # Replace the cluster name and container instance ID placeholders with the actual values
                sed -i -e "s/{cluster}/$cluster/g" /etc/awslogs/awslogs.conf
                sed -i -e "s/{container_instance_id}/$container_instance_id/g" /etc/awslogs/awslogs.conf
                
                service awslogs start
                chkconfig awslogs on
              end script
              --==BOUNDARY==--
                     
        IamInstanceProfile: 
          Arn: !GetAtt EC2InstanceProfile.Arn
        KeyName: !Ref SshKeyName
        NetworkInterfaces: 
          - 
            DeviceIndex: 0
            AssociatePublicIpAddress:
              !If
                - IsASGAutoAssignPublicIp
                - 'true'
                - 'false'
            SubnetId: !Select [0, !Ref SubnetIds]
            Groups: 
              - !Ref SgEC2
              -
                !If
                  - HasExtraSG
                  - !Ref ExtraSG
                  - AWS::NoValue
              # !If
              #   - CreateNewNodeSG
              #   - 
              #     - !Ref SgEC2
              #   - !Split [ ",", !Ref ExistingSgEC2s ]
        ImageId: !Ref ECSAMI
          # !If
          #   - PreferredDefaultAMI
          #   - !Ref LatestAMIId
          #   # - !FindInMap [AMIMap, !Ref "AWS::Region", ami ]
          #   - !Ref NodeImageId        

  

  ECSDefaultCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}-ecs-cluster

  ECSCaddyTD:
      Type: AWS::ECS::TaskDefinition
      Properties: 
        Volumes:
          -
            Name: empty
        TaskRoleArn: !GetAtt ECSTaskRole.Arn
        ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
        Family: !Sub ${AppName}-${ECSDefaultCluster}
        # PlacementConstraints: 
        #   - 
        #     Type: memberOf
        #     Expression: !Sub "attribute:instance-purchase-option == ${InstancePurchaseOption}"
        ContainerDefinitions: 
          - 
            Name: Caddy
            #Image: "abiosoft/caddy:php"
            # Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}:${Tag}
            Image: !Ref CaddyImage
              # !If
              #   - UseBuiltInTaskDefinitionCond
              #   # - "abiosoft/caddy:php"
              #   - "pahud/caddy"
              #   - !If
              #     - EmptyTag
              #     # - !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}:${ECSTaskInfo.Tag}
              #     - !Sub ${ECSTaskInfo.Image}
              #     - !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}:${Tag}
            Cpu: "512"
            PortMappings: 
              - 
                ContainerPort: 2015
                HostPort: 0
            Memory: "1024"
            Ulimits:
              - Name: nofile
                HardLimit: "10240"
                SoftLimit: "10240"
            Essential: "true"
            Environment: 
              -
                Name: SERVICE_ENV
                Value: prod
            Secrets:
              -
                Name: ECSYourName
                ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ECSYourName-${AWS::StackName}"
              -
                Name: ECSYourPassword
                ValueFrom: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ECSYourPassword-${AWS::StackName}"

            MountPoints:
              -
                ContainerPath: /var/log
                SourceVolume: empty
                ReadOnly: false
            LogConfiguration:
              LogDriver: "awslogs"
              Options:
                awslogs-region: !Ref AWS::Region
                awslogs-group: !Sub /aws/ECS/${AppName}-${AWS::StackName}
                awslogs-stream-prefix: !Ref AppName
          # - 
          #   Name: awslogs
          #   Image: "pahud/awslogs:caddy"
          #   Cpu: "128"
          #   Memory: "128"
          #   Ulimits:
          #     - Name: nofile
          #       HardLimit: "10240"
          #       SoftLimit: "10240"
          #   Essential: "true"
          #   MountPoints:
          #     -
          #       ContainerPath: /var/log/caddy
          #       SourceVolume: empty
          #       ReadOnly: false
          #   LogConfiguration:
          #     LogDriver: "awslogs"
          #     Options:
          #       awslogs-region: !Ref AWS::Region
          #       awslogs-group: !Sub /aws/ECS/${AppName}-awslogs-${AWS::StackName}
          #       awslogs-stream-prefix: !Ref AppName



  ECSService:
    DependsOn: [publicALB, publicALBTargetGroup, ALBListener]
    Type: "AWS::ECS::Service"
    Properties: 
      Cluster: !Ref ECSDefaultCluster
      DeploymentConfiguration:
        MaximumPercent: !Ref MaxPercent
        MinimumHealthyPercent: !Ref MinPercent
      DesiredCount: !Ref ServiceDesiredCount
      LoadBalancers: 
          - ContainerName: !Ref AppName
            ContainerPort: 2015
            TargetGroupArn: !Ref publicALBTargetGroup
      Role: !Ref ECSServiceRole
      #TaskDefinition: !Ref ECSWebTD
      TaskDefinition: !Ref ECSCaddyTD
      ServiceName: !Sub "${AWS::StackName}-${AppName}"
      PlacementStrategies: 
        - Type: spread
          Field: attribute:ecs.availability-zone
        - Type: spread
          Field: host


  ECSscalableTarget:
    DependsOn: ECSService
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: 
        Fn::Join:
          - ""
          -
            - "service/"
            - !Ref ECSDefaultCluster
            - "/"
            - !GetAtt ECSService.Name
      RoleARN: !GetAtt ECSAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

######################
# scale ECS service when too many ALB 5XX error
######################
  ECSscalingPolicy01:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "[+]TooManyALB5XX"
      PolicyType: StepScaling
      ScalingTargetId: !Ref ECSscalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        # AdjustmentType: ExactCapacity
        Cooldown: 30
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 200
        MinAdjustmentMagnitude: 2      

######################
# scale ECS service when service CPUUtilization increases/decrease
######################
  ECSscalingPolicyCpuUtil01:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "[o]ServiceCPUUtilTargetTracking"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSscalableTarget
      TargetTrackingScalingPolicyConfiguration:
        # CustomizedMetricSpecification: 
        #   CustomizedMetricSpecification
        DisableScaleIn: false
        PredefinedMetricSpecification: 
          PredefinedMetricType: ECSServiceAverageCPUUtilization
          # ResourceLabel: !Sub "${publicALB.LoadBalancerFullName}/${publicALBTargetGroup.TargetGroupFullName}"
        ScaleInCooldown: 30
        ScaleOutCooldown: 30
        TargetValue: 50    
      # StepScalingPolicyConfiguration:
      #   AdjustmentType: PercentChangeInCapacity
      #   Cooldown: 30
      #   MetricAggregationType: Average
      #   StepAdjustments:
      #   - MetricIntervalLowerBound: 0
      #     ScalingAdjustment: 200
      #   MinAdjustmentMagnitude: 2          

  # ECSscalingPolicyCpuUtil02:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: "[-]ServiceCPUUtilLow"
  #     PolicyType: StepScaling
  #     ScalingTargetId: !Ref ECSscalableTarget
  #     StepScalingPolicyConfiguration:
  #       AdjustmentType: ExactCapacity
  #       Cooldown: 30
  #       MetricAggregationType: Average
  #       StepAdjustments:
  #       - MetricIntervalUpperBound: 0
  #         ScalingAdjustment: 1  
  #       # MinAdjustmentMagnitude: 2       


######################
# scale ECS service when service MemoryUtilization increases/decrease
######################
  ECSscalingPolicyMemUtil01:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "[o]ServiceMEMUtilHigh"
      PolicyType: TargetTrackingScaling
      #PolicyType: StepScaling
      ScalingTargetId: !Ref ECSscalableTarget
      TargetTrackingScalingPolicyConfiguration:
        # CustomizedMetricSpecification: 
        #   CustomizedMetricSpecification
        DisableScaleIn: false
        PredefinedMetricSpecification: 
          PredefinedMetricType: ECSServiceAverageMemoryUtilization
          # ResourceLabel: !Sub "${publicALB.LoadBalancerFullName}/${publicALBTargetGroup.TargetGroupFullName}"
        ScaleInCooldown: 30
        ScaleOutCooldown: 30
        TargetValue: 50    
      # StepScalingPolicyConfiguration:
      #   AdjustmentType: PercentChangeInCapacity
      #   Cooldown: 60
      #   MetricAggregationType: Average
      #   StepAdjustments:
      #   - MetricIntervalLowerBound: 0
      #     ScalingAdjustment: 200
      #   MinAdjustmentMagnitude: 2          

  # ECSscalingPolicyMemUtil02:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: "[-]ServiceMEMUtilLow"
  #     PolicyType: StepScaling
  #     ScalingTargetId: !Ref ECSscalableTarget
  #     StepScalingPolicyConfiguration:
  #       AdjustmentType: ExactCapacity
  #       Cooldown: 30
  #       MetricAggregationType: Average
  #       StepAdjustments:
  #       - MetricIntervalUpperBound: 0
  #         ScalingAdjustment: 1  
  #       # MinAdjustmentMagnitude: 2    


  ECSscalingPolicyALBTargetTracking:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "[o]ServiceALBTargetTracking"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSscalableTarget
      TargetTrackingScalingPolicyConfiguration:
        # CustomizedMetricSpecification: 
        #   CustomizedMetricSpecification
        DisableScaleIn: false
        PredefinedMetricSpecification: 
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel: !Sub "${publicALB.LoadBalancerFullName}/${publicALBTargetGroup.TargetGroupFullName}"
        ScaleInCooldown: 30
        ScaleOutCooldown: 30
        TargetValue: 1000       

######################
# Scaling Policies for Autoscaling Group
######################          
  ASGscalingPolicy01:
    # Condition: EnableASGCond
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: PercentChangeInCapacity
      MinAdjustmentMagnitude: 2
      PolicyType: StepScaling
      # Cooldown: 60
      AutoScalingGroupName: !Ref ASG1
      # ScalingAdjustment: 1  
      StepAdjustments:   
        - MetricIntervalLowerBound: 0
          # MetricIntervalUpperBound: 60
          ScalingAdjustment: 100        
  ASGscalingPolicy02:
    # Condition: EnableASGCond         
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: PercentChangeInCapacity
      MinAdjustmentMagnitude: 2
      PolicyType: StepScaling
      # Cooldown: 60
      AutoScalingGroupName: !Ref ASG1
      # ScalingAdjustment: 1  
      StepAdjustments:   
        - MetricIntervalLowerBound: 0
          # MetricIntervalUpperBound: 60
          ScalingAdjustment: 200  

  ASGscalingPolicy03:
    # Condition: EnableASGCond
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: PercentChangeInCapacity
      MinAdjustmentMagnitude: 2
      PolicyType: StepScaling
      # Cooldown: 60
      AutoScalingGroupName: !Ref ASG1
      # ScalingAdjustment: 1  
      StepAdjustments:   
        - MetricIntervalLowerBound: 0
          # MetricIntervalUpperBound: 60
          ScalingAdjustment: 200  

  ASGscalingPolicy04:
    # Condition: EnableASGCond        
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: PercentChangeInCapacity
      PolicyType: SimpleScaling
      # Cooldown: 60
      AutoScalingGroupName: !Ref ASG1
      ScalingAdjustment: -30
      # StepAdjustments:   
      #   - MetricIntervalLowerBound: 0
      #     # MetricIntervalUpperBound: 60
      #     ScalingAdjustment: -30

  ASGscalingPolicy05:
    # Condition: EnableASGCond
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: PercentChangeInCapacity
      PolicyType: SimpleScaling
      # Cooldown: 60
      AutoScalingGroupName: !Ref ASG1
      ScalingAdjustment: -30 
      # StepAdjustments:   
      #   - MetricIntervalLowerBound: 0
      #     # MetricIntervalUpperBound: 60
      #     ScalingAdjustment: -30

######################
# Alarm to Scale ASG
######################
  ASGCPUHighAlarmScaleOut:
    # Condition: EnableASGCond
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '60'
      AlarmDescription: Alarm if our ASG average CPU Utilization is high
      Period: '60'
      AlarmActions: [!Ref ASGscalingPolicy01]
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref ASG1
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  ECSClusterCPURsvHighScaleOut:
    # Condition: EnableASGCond
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '5'
      Statistic: Average
      Threshold: '70'
      AlarmDescription: Alarm if our ECS Cluster CPUReservation is high
      Period: '60'
      AlarmActions: [!Ref ASGscalingPolicy02]
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSDefaultCluster
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: CPUReservation

  ECSClusterMemRsvHighScaleOut:
    # Condition: EnableASGCond
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '5'
      Statistic: Average
      Threshold: '60'
      AlarmDescription: Alarm if our ECS Cluster MemoryReservation is high
      Period: '60'
      AlarmActions: [!Ref ASGscalingPolicy03]
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSDefaultCluster
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: MemoryReservation


  ECSClusterCPURsvLowScaleIn:
    # Condition: EnableASGCond
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '20'
      Statistic: Average
      Threshold: '20'
      AlarmDescription: Alarm if our ECS Cluster CPUReservation is low
      Period: '60'
      AlarmActions: [!Ref ASGscalingPolicy04]
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSDefaultCluster
      ComparisonOperator: LessThanOrEqualToThreshold
      MetricName: CPUReservation

  ECSClusterMemRsvLowScaleIn:
    # Condition: EnableASGCond
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '20'
      Statistic: Average
      Threshold: '20'
      AlarmDescription: Alarm if our ECS Cluster MemoryReservation is low
      Period: '60'
      AlarmActions: [!Ref ASGscalingPolicy05]
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSDefaultCluster
      ComparisonOperator: LessThanOrEqualToThreshold
      MetricName: MemoryReservation

#############################
# Alarm to Scale ECS Service
#############################


  ALB500sAlarmScaleUp:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '10'
      TreatMissingData: 'notBreaching'
      AlarmDescription: Alarm if our ALB generates too many HTTP 500s.
      Period: '60'
      AlarmActions: [!Ref ECSscalingPolicy01]
      Namespace: AWS/ApplicationELB
      Dimensions:
      - Name: ECSService
        Value: !GetAtt ECSService.Name
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: HTTPCode_ELB_5XX_Count


  ServiceCPUUtilAlarmScaleOut:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '60'
      AlarmDescription: Alarm if our ECS Service CPU Utilization is too high
      Period: '60'
      AlarmActions: [!Ref ECSscalingPolicyCpuUtil01]
      Namespace: AWS/ECS
      Dimensions:
      - Name: ServiceName
        Value: !GetAtt ECSService.Name
      - Name: ClusterName
        Value: !Ref ECSDefaultCluster
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: CPUUtilization

  # ServiceCPUUtilAlarmScaleIn:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     EvaluationPeriods: '120'
  #     Statistic: Average
  #     Threshold: '20'
  #     AlarmDescription: Alarm if our ECS Service CPU Utilization is too low
  #     Period: '60'
  #     AlarmActions: [!Ref ECSscalingPolicyCpuUtil02]
  #     Namespace: AWS/ECS
  #     Dimensions:
  #     - Name: ServiceName
  #       Value: !GetAtt ECSService.Name
  #     - Name: ClusterName
  #       Value: !Ref ECSDefaultCluster
  #     ComparisonOperator: LessThanOrEqualToThreshold
  #     MetricName: CPUUtilization

  ServiceMEMUtilAlarmScaleOut:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '60'
      AlarmDescription: Alarm if our ECS Service Memory Utilization is too high
      Period: '60'
      AlarmActions: [!Ref ECSscalingPolicyMemUtil01]
      Namespace: AWS/ECS
      Dimensions:
      - Name: ServiceName
        Value: !GetAtt ECSService.Name
      - Name: ClusterName
        Value: !Ref ECSDefaultCluster
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: MemoryUtilization

  # ServiceMEMUtilAlarmScaleIn:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     EvaluationPeriods: '120'
  #     Statistic: Average
  #     Threshold: '20'
  #     AlarmDescription: Alarm if our ECS Service Memory Utilization is too low
  #     Period: '60'
  #     AlarmActions: [!Ref ECSscalingPolicyMemUtil02]
  #     Namespace: AWS/ECS
  #     Dimensions:
  #     - Name: ServiceName
  #       Value: !GetAtt ECSService.Name
  #     - Name: ClusterName
  #       Value: !Ref ECSDefaultCluster
  #     ComparisonOperator: LessThanOrEqualToThreshold
  #     MetricName: MemoryUtilization

######################
#  CWE 
######################

  ECSEventsRule:
    Type: "AWS::Events::Rule"
    Properties: 
      Description: "all ECS events"
      EventPattern:
        source: 
          - aws.ecs
        detail-type:
          - "ECS Task State Change"
          - "ECS Container Instance State Change"
        detail:
          clusterArn: 
            - !Ref ECSDefaultCluster
      Name: !Sub "ECS-Events-${AWS::StackName}"
      # RoleArn: String
      # ScheduleExpression: String
      # State: String
      Targets:
        - Arn: !Ref ECSEventsSNSTopic
          Id: !GetAtt ECSEventsSNSTopic.TopicName


######################
# SNS
######################
  ECSEventsSNSTopic:
    Type: "AWS::SNS::Topic"
    Properties: 
      DisplayName: !Sub "ECS-Events-${AWS::StackName}"
      # Subscription:
      #   SNS Subscription
      TopicName: !Sub "ECS-Events-${AWS::StackName}"


  PHPErrorSNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          !If 
            - HasSMSCond
            -
              Endpoint: !Ref SNSMobileNumber
              Protocol: sms
            -
              Endpoint: "https://www.amazon.com"
              Protocol: https



  # for placeholder
  EmptySNSTopic:
    Type: "AWS::SNS::Topic"

######################
# Parameter Store
######################
  MyParametersALBDNSName:
    Type: "AWS::SSM::Parameter"
    Properties: 
      Name: !Sub "/demo/prod/${AWS::Region}/ALB-DNSName"
      Description: String
      Type: String
      Value: !GetAtt publicALB.DNSName
  MyParametersSNSTopicArn:
    Type: "AWS::SSM::Parameter"
    Properties: 
      Name: !Sub "/demo/prod/${AWS::Region}/SNS-Arn"
      Description: String
      Type: String
      Value: !Ref EmptySNSTopic
      
######################
# CloudWatch Alarm
######################
  # TargetTrackingALBAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties: 
  #     ActionsEnabled: true
  #     # AlarmActions: 
  #     #   - String
  #     AlarmDescription: 'ALB TargetTracking Alarm'
  #     AlarmName: !Sub 'TargetTracking-ALB-${AWS::StackName}'
  #     ComparisonOperator: GreaterThanThreshold
  #     DatapointsToAlarm: 1
  #     Dimensions: 
  #       - Name: LoadBalancer
  #         Value: !Sub "${publicALB.LoadBalancerFullName}"
  #       - Name: TargetGroup
  #         Value: !Sub "${publicALBTargetGroup.TargetGroupFullName}"
  #     # EvaluateLowSampleCountPercentile: String
  #     EvaluationPeriods: 1
  #     # ExtendedStatistic: String
  #     # InsufficientDataActions: 
  #     #   - String
  #     MetricName: RequestCountPerTarget
  #     # Metrics: 
  #     #   - MetricDataQuery
  #     Namespace: AWS/ApplicationELB
  #     # OKActions: 
  #     #   - String
  #     Period: 60
  #     Statistic: Sum
  #     Threshold: 1000
  #     TreatMissingData: missing
  #     Unit: Count


######################
# Outputs
######################
Outputs:
  StackName:
    Value:
      !Ref AWS::StackName
  AZs:
    Value:
      Fn::Join:
        - ""
        - !GetAZs ""
  VpcId:
    Value:
      !Ref VpcId
    Description: The VPC ID of the created VPC  
    Export:
      Name: 
        "Fn::Sub": 
          - ${StackName}-VpcId
          - StackName: !Ref AWS::StackName
  LoadBalancerURL:
    Description: LoadBalancer URL for the demo service
    Value:
      !Sub
        - 'http://${LBDNS}'
        -
          LBDNS: !GetAtt publicALB.DNSName

  PHPErrorURL:
    Description: click this URL to increase 500 errors
    Value:
      !Sub
        - 'http://${LBDNS}/error.php'
        -
          LBDNS: !GetAtt publicALB.DNSName

  ECSServiceName: 
    Value: !GetAtt ECSService.Name

  Tag:
    Value: !Ref Tag
    
  DockerImage:
    Value: !Ref CaddyImage
  
  ClusterName:
    Value: !Ref ECSDefaultCluster
  
  ServiceName:
    Value: !GetAtt ECSService.Name


